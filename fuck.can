export testcase powerOn (void) {
  stateMachine("powerOn",routeNum,noParaPick);
}

export testcase powerOff (void) {
  stateMachine("powerOff",routeNum,noParaPick);
}

export testcase initProduct (void) {
  stateMachine("initProduct",routeNum,noParaPick);
}

export testcase readSwVer (void) {
  stateMachine("readSwVer",routeNum,noParaPick);
}

export testcase chkDrivingModeReqSigImpWhenIgnOff (char msWaitForTurnOn[],char doorSignal[],char drvModeReqVal[]) {
  char paraPick[3][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""},{"drvModeReqVal",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],drvModeReqVal,elCount(paraPick[2][1]));
  stateMachine("chkDrivingModeReqSigImpWhenIgnOff",routeNum,paraPick);
}

export testcase chkALCMLightLvlSetSigImpWhenIgnOff (char msWaitForTurnOn[],char doorSignal[],char alcmLightLvlSetVal[]) {
  char paraPick[3][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""},{"alcmLightLvlSetVal",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],alcmLightLvlSetVal,elCount(paraPick[2][1]));
  stateMachine("chkALCMLightLvlSetSigImpWhenIgnOff",routeNum,paraPick);
}

export testcase chkPosLmpStslSigImpWhenIgnOff (char sysPwrModeVal[],char posLmpStsVal[],char doorSignal[]) {
  char paraPick[3][2][100] = {{"sysPwrModeVal",""},{"posLmpStsVal",""},{"doorSignal",""}};
  strncpy(paraPick[0][1],sysPwrModeVal,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],posLmpStsVal,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],doorSignal,elCount(paraPick[2][1]));
  stateMachine("chkPosLmpStslSigImpWhenIgnOff",routeNum,paraPick);
}

export testcase chkDoorOpenSignalImpWhenMode0IgnOff (char msWaitForTurnOn[],char doorSignal[]) {
  char paraPick[2][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  stateMachine("chkDoorOpenSignalImpWhenMode0IgnOff",routeNum,paraPick);
}

export testcase chkRisingTimeAndMemoryFunctionOfDoorOpenSignalImpExceptMode0IgnOff (char msWaitForTurnOn[],char Mode3_6[],char Mode2_5[],char posLmpStsVal[],char doorSignal[]) {
  char paraPick[5][2][100] = {{"msWaitForTurnOn",""},{"Mode3_6",""},{"Mode2_5",""},{"posLmpStsVal",""},{"doorSignal",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],Mode3_6,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],Mode2_5,elCount(paraPick[2][1]));
  strncpy(paraPick[3][1],posLmpStsVal,elCount(paraPick[3][1]));
  strncpy(paraPick[4][1],doorSignal,elCount(paraPick[4][1]));
  stateMachine("chkRisingTimeAndMemoryFunctionOfDoorOpenSignalImpExceptMode0IgnOff",routeNum,paraPick);
}

export testcase chkAlcmKeepTime (char Mode2[],char msWaitForTurnOn[],char doorSignal[],char accOrOnMode[]) {
  char paraPick[4][2][100] = {{"Mode2",""},{"msWaitForTurnOn",""},{"doorSignal",""},{"accOrOnMode",""}};
  strncpy(paraPick[0][1],Mode2,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],msWaitForTurnOn,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],doorSignal,elCount(paraPick[2][1]));
  strncpy(paraPick[3][1],accOrOnMode,elCount(paraPick[3][1]));
  stateMachine("chkAlcmKeepTime",routeNum,paraPick);
}

export testcase chkDrivingModeReqSigImpWhenAccOn (char msWaitForTurnOn[],char doorSignal[],char drvModeReqVal[]) {
  char paraPick[3][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""},{"drvModeReqVal",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],drvModeReqVal,elCount(paraPick[2][1]));
  stateMachine("chkDrivingModeReqSigImpWhenAccOn",routeNum,paraPick);
}

export testcase chkALCMLightLvlSetSigImpWhenAccOn (char msWaitForTurnOn[],char doorSignal[],char alcmLightLvlSetVal[]) {
  char paraPick[3][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""},{"alcmLightLvlSetVal",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],alcmLightLvlSetVal,elCount(paraPick[2][1]));
  stateMachine("chkALCMLightLvlSetSigImpWhenAccOn",routeNum,paraPick);
}

export testcase chkALCMLightLvlSetSigImpWhenIgnOn (char doorSignal[],char alcmLightLvlSetVal[],char msWaitForTurnOn[],char freqG[],char dutyG[],char freqB[],char dutyB[]) {
  char paraPick[7][2][100] = {{"doorSignal",""},{"alcmLightLvlSetVal",""},{"msWaitForTurnOn",""},{"freqG",""},{"dutyG",""},{"freqB",""},{"dutyB",""}};
  strncpy(paraPick[0][1],doorSignal,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],alcmLightLvlSetVal,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],msWaitForTurnOn,elCount(paraPick[2][1]));
  strncpy(paraPick[3][1],freqG,elCount(paraPick[3][1]));
  strncpy(paraPick[4][1],dutyG,elCount(paraPick[4][1]));
  strncpy(paraPick[5][1],freqB,elCount(paraPick[5][1]));
  strncpy(paraPick[6][1],dutyB,elCount(paraPick[6][1]));
  stateMachine("chkALCMLightLvlSetSigImpWhenIgnOn",routeNum,paraPick);
}

export testcase chkAccImpWhenMode0 (char msWaitForTurnOn[],char doorSignal[]) {
  char paraPick[2][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  stateMachine("chkAccImpWhenMode0",routeNum,paraPick);
}

export testcase chkRisingTimeAndMemoryFunctionOfAccImpExceptMode0SwitchOff (char msWaitForTurnOn[],char doorSignal[],char Mode3_6[],char Mode2_5[],char posLmpStsVal[]) {
  char paraPick[5][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""},{"Mode3_6",""},{"Mode2_5",""},{"posLmpStsVal",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],Mode3_6,elCount(paraPick[2][1]));
  strncpy(paraPick[3][1],Mode2_5,elCount(paraPick[3][1]));
  strncpy(paraPick[4][1],posLmpStsVal,elCount(paraPick[4][1]));
  stateMachine("chkRisingTimeAndMemoryFunctionOfAccImpExceptMode0SwitchOff",routeNum,paraPick);
}

export testcase chkIgnOnImpWhenMode0 (char msWaitForTurnOn[],char doorSignal[],char pwmMode[]) {
  char paraPick[3][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""},{"pwmMode",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],pwmMode,elCount(paraPick[2][1]));
  stateMachine("chkIgnOnImpWhenMode0",routeNum,paraPick);
}

export testcase chkRisingTimeAndMemoryFunctionOfIgnOnImpExceptMode0SwitchOff (char msWaitForTurnOn[],char doorSignal[],char pwmMode[]) {
  char paraPick[3][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""},{"pwmMode",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  strncpy(paraPick[2][1],pwmMode,elCount(paraPick[2][1]));
  stateMachine("chkRisingTimeAndMemoryFunctionOfIgnOnImpExceptMode0SwitchOff",routeNum,paraPick);
}

export testcase chkAccImpOnColorWhenIgnOffAlcmOn (char msWaitForTurnOn[],char doorSignal[]) {
  char paraPick[2][2][100] = {{"msWaitForTurnOn",""},{"doorSignal",""}};
  strncpy(paraPick[0][1],msWaitForTurnOn,elCount(paraPick[0][1]));
  strncpy(paraPick[1][1],doorSignal,elCount(paraPick[1][1]));
  stateMachine("chkAccImpOnColorWhenIgnOffAlcmOn",routeNum,paraPick);
}

